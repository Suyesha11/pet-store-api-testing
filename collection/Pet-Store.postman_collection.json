{
	"info": {
		"_postman_id": "2be6a7e1-0fd9-4e02-8b21-60c705d5093c",
		"name": "Pet-Store",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14399514"
	},
	"item": [
		{
			"name": "Pet-store flow",
			"item": [
				{
					"name": "Add new pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response=pm.response.json();\r",
									"pm.collectionVariables.set(\"petId\", response.id);\r",
									"console.log(response.id)\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body matches keys\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"     pm.expect(pm.response.text()).to.include(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"Category ID to be 120120\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.category.id).to.eql(120120);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let payload = {\r",
									"  \"id\": `{{$randomInt}}`,\r",
									"  \"category\": {\r",
									"    \"id\": 120120,\r",
									"    \"name\": \"Hound\"\r",
									"  },\r",
									"  \"name\": \"{{$randomFirstName}}\",\r",
									"  \r",
									"  \"status\": \"available\"\r",
									"}\r",
									"pm.variables.set('payload', JSON.stringify(payload));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/pet",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find pets by status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response).to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"",
									"    responseData.forEach(function(pet) {",
									"        pm.expect(pet).to.be.an('object');",
									"        pm.expect(pet).to.include.all.keys('id','status');",
									"",
									"        pm.expect(pet.id).to.be.a('number');",
									"        pm.expect(pet.status).to.be.a('string');",
									"       ",
									"    });",
									"});",
									"",
									"pm.test(\"Category name is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(pet) {",
									"        if(pet.category){",
									"            pm.expect(pet.category.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Category name should not be empty\");",
									"        }",
									"    });",
									"});",
									"",
									"",
									"",
									"pm.test(\"Response time is within acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseURL}}/pet/findByStatus?status=available",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "available",
									"description": "Status = available,pending,sold"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update existing pet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{petId}},\r\n    \"category\": {\r\n    \"id\": 120120,\r\n    \"name\": \"Hound\"\r\n  },\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \r\n  \"status\": \"available\"\r\n   \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/pet",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find pet by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.get(\"petId\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0, \"Id should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Category object has required fields - id and name\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.category).to.exist;",
									"    pm.expect(responseData.category.id).to.exist;",
									"    pm.expect(responseData.category.name).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseURL}}/pet/:id",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pet",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{petId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return pet inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('{{PetStatus-Updated}}');",
									"    pm.expect(responseData).to.have.property('5000');",
									"    pm.expect(responseData).to.have.property('string');",
									"    pm.expect(responseData).to.have.property('unavailable');",
									"    pm.expect(responseData).to.have.property('pending');",
									"    pm.expect(responseData).to.have.property('available');",
									"    ",
									"});",
									"",
									"",
									"pm.test(\"Verify the response content type is 'application/json'\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Available field value is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.available).to.be.a('number');",
									"    pm.expect(responseData.available).to.be.at.least(0, \"Value should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Sold field value is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('sold').that.is.a('number').and.is.at.least(0);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseURL}}/store/inventory",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"store",
								"inventory"
							]
						}
					},
					"response": []
				},
				{
					"name": "Place an order for a pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test to check if the response contains a random number between 1 and 10\r",
									"\r",
									"\r",
									"let response =pm.response.json();\r",
									"pm.collectionVariables.set(\"orderId\",response.id)\r",
									"console.log(response.id)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{$randomInt}},\r\n  \"petId\": {{petId}},\r\n  \"quantity\": 1,\r\n  \"shipDate\": \"2024-07-23T13:05:30.375Z\",\r\n  \"status\": \"placed\",\r\n  \"complete\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/store/order",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate order fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('petId');",
									"    pm.expect(responseData).to.have.property('quantity');",
									"    pm.expect(responseData).to.have.property('shipDate');",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('complete');",
									"});",
									"",
									"",
									"",
									"pm.test(\"Quantity is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.quantity).to.be.a('number');",
									"    pm.expect(responseData.quantity).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseURL}}/store/order/:orderId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"store",
								"order",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseURL}}/store/order/:orderId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"store",
								"order",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete pets",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.get(\"petId\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"",
									"",
									"pm.test(\"Type field in the response should exist and be a string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.type).to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Message field in the response should exist and be a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message field should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseURL}}/pet/:id",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pet",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{petId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Everything about your Pets."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Status code is 200\", function(){\r",
					"pm.response.to.have.status(200);\r",
					"})"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "https://petstore.swagger.io/v2",
			"type": "string"
		},
		{
			"key": "petId",
			"value": ""
		},
		{
			"key": "responsebody",
			"value": ""
		},
		{
			"key": "orderId",
			"value": ""
		}
	]
}